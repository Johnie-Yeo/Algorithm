#pragma warning(disable: 4996)

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define BUFFER_SIZE 100
#define LINE_LENGTH 200
#define RED 0
#define BLACK 1

typedef struct {
	char name[BUFFER_SIZE];
	char company[BUFFER_SIZE];
	char address[BUFFER_SIZE];
	char zipcode[BUFFER_SIZE];
	char phone[BUFFER_SIZE];
	char email[BUFFER_SIZE];
}Person;
typedef Person Key;
typedef struct node {
	Key info;
	int color;
	struct node *parent;
	struct node *left;
	struct node *right;
}Node;

Node *ROOT = NULL;

void read();
void list();
void find();
void trace();
void remove();
void save();
int read_line(FILE *fp, char str[], int n);
void add(char str[]);
Node* Node_allocation();
char* delet_space(char str[]);
void inorder_traversal(Node *root);
void print_info(Person p);
Node *tree_search(Node *x, char *str);
void traversal_trace(Node *p, char *str);
Node *tree_successor(Node *x);
Node *tree_minimum(Node *x);
void write_file(FILE *fp, Node *p);
Node *floor(char *str);
Node *ceiling(char *str);
void left_rotate(Node *x);
void right_rotate(Node *x);
void rb_insert(Node *z);
void rb_insert_fixup(Node *z);
Node *rb_delete(Node *z);
void rb_delete_fixup(Node *x);

int main()
{
	char command[BUFFER_SIZE];

	while (1) {
		printf("$ ");
		scanf("%s", command);
		if (strcmp(command, "read") == 0) {
			read();
		}
		else if (strcmp(command, "list") == 0) {
			list();
		}
		else if (strcmp(command, "find") == 0) {
			find();
		}
		else if (strcmp(command, "trace") == 0) {
			trace();
		}
		else if (strcmp(command, "delete") == 0) {
			remove();
		}
		else if (strcmp(command, "save") == 0) {
			save();
		}
		else if (strcmp(command, "exit") == 0) {
			break;
		}
		else {
			printf("Invalid Arguments.\n");
			continue;
		}
	}
	return 0;
}
void read()
{
	char fileN[BUFFER_SIZE];
	scanf("%s", fileN);
	char buffer[LINE_LENGTH];

	FILE *fp = fopen(fileN, "r");
	if (fp == NULL) {
		printf("Open failed.\n");
		return;
	}
	while (!feof(fp)) {
		if(read_line(fp, buffer, LINE_LENGTH)>0)
			add(buffer);
	}

	fclose(fp);
}
int read_line(FILE *fp, char str[], int n)
{
	int ch, i = 0;

	while ((ch = fgetc(fp)) != '\n'&&ch != EOF)
		if (i < n)
			str[i++] = ch;
	str[i] = '\0';
	return i;
}
void add(char str[])
{
	char *delim = "\t|";
	char *buf1;
	Node *cur = Node_allocation();

	buf1 = strtok(str, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.name, buf1);

	buf1 = strtok(NULL, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.company, buf1);

	buf1 = strtok(NULL, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.address, buf1);

	buf1 = strtok(NULL, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.zipcode, buf1);

	buf1 = strtok(NULL, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.phone, buf1);

	buf1 = strtok(NULL, delim);
	buf1 = delet_space(buf1);
	strcpy(cur->info.email, buf1);

	rb_insert(cur);
}
Node* Node_allocation()
{
	Node *p = (Node *)malloc(sizeof(Node));
	p->left = NULL;
	p->right = NULL;
	p->parent = NULL;
	
	return p;
}
char* delet_space(char str[])
{
	int j = 0;
	while (str[j] == ' ')
		str++;
	int i = strlen(str);
	while (str[i - 1] == ' ')
		i--;
	str[i] = '\0';

	return str;
}

void list()
{
	inorder_traversal(ROOT);
}
void inorder_traversal(Node *root)
{
	if (root != NULL) {
		inorder_traversal(root->left);
		print_info(root->info);
		inorder_traversal(root->right);
	}
}
void print_info(Person p)
{
	printf("%s\n", p.name);
	printf("\tCompany: %s\n", p.company);
	printf("\tAddress: %s\n", p.address);
	printf("\tZipcode: %s\n", p.zipcode);
	printf("\tPhones : %s\n", p.phone);
	printf("\tEmail  : %s\n", p.email);
}
void find()
{
	char name[BUFFER_SIZE];
	int ans;

	scanf("%s", name);
	Node *tmp = ROOT;
	tmp=tree_search(tmp, name);
	if (tmp == NULL) {
		printf("There is not anybody named %s.\n", name);
		printf("1.Floor 2.Ceiling 3.Keep going.");
		scanf("%d", &ans);
		if (ans == 1) {
			tmp = floor(name);
			if (tmp == NULL) {
				printf("The tree does not have floor of %s.\n", name);
				return;
			}
		}
		else if (ans == 2) {
			tmp = ceiling(name);
			if (tmp == NULL) {
				printf("The tree does not have ceiling of %s.\n", name);
				return;
			}
		}
		else if (ans == 3) {
			printf("Type next order.\n");
			return;
		}
		else {
			printf("Invalid Argument.\n");
			return;
		}
	}
	print_info(tmp->info);
}
Node *floor(char *str)
{
	Node *y = NULL;
	Node *x = ROOT;
	while (x != NULL) {
		y = x;
		if (strcmp(str, x->info.name)<0)
			x = x->left;
		else
			x = x->right;
	}
	if (strcmp(y->info.name, str) < 0)
		return y;
	else {
		while (y->parent != NULL && y->parent->right!=y)
			y = y->parent;
		return y->parent;
	}
}
Node *ceiling(char *str)
{
	Node *y = NULL;
	Node *x = ROOT;
	while (x != NULL) {
		y = x;
		if (strcmp(str, x->info.name)<0)
			x = x->left;
		else
			x = x->right;
	} 
	if (strcmp(y->info.name, str) > 0)
		return y;
	else {
		while (y->parent != NULL && y->parent->left!=y)
			y = y->parent;
		return y->parent;
	}
}
Node *tree_search(Node *x, char *str)
{
	if (x == NULL)
		return x;
	int result = strcmp(x->info.name, str);
	if (result==0)
		return x;
	if (result>0)
		return tree_search(x->left, str);
	else
		return tree_search(x->right, str);
}
void trace()
{
	char name[BUFFER_SIZE];
	scanf("%s", name);
	Node *tmp = ROOT;
	traversal_trace(tmp, name);
}
void traversal_trace(Node *p, char *str)
{
	if (p != NULL) {
		int result = strcmp(p->info.name, str);

		if (result == 0)
			print_info(p->info);
		else {
			printf("%s\t", p->info.name);
			if (result < 0) {
				printf("Go to right.\n");
				traversal_trace(p->right, str);
			}
			else {
				printf("Go to left.\n");
				traversal_trace(p->left, str);
			}
		}
	}
}
void remove()
{
	char name[BUFFER_SIZE];
	scanf("%s", name);
	Node *tmp = ROOT;
	tmp = tree_search(tmp, name);
	if (tmp == NULL) {
		printf("There is not anybody named %s.\n", name);
		return;
	}
	tmp = rb_delete(tmp);

	free(tmp);
}

Node *tree_successor(Node *x)
{
	if (x->right != NULL)
		return tree_minimum(x->right);
	Node *y = x->parent;
	while (y != NULL&&x == y->right) {
		x = y;
		y = y->parent;
	}
	return y;
}
Node *tree_minimum(Node *x)
{
	while (x->left != NULL)
		x = x->left;
	return x;
}
void save()
{
	char fileN[BUFFER_SIZE];
	scanf("%s", fileN);
	Node *tmp = ROOT;
	FILE *fp = fopen(fileN, "w");
	write_file(fp,tmp);
	fclose(fp);	
}
void write_file(FILE *fp, Node *p)
{
	if (p != NULL) {
		write_file(fp, p->left);
		fprintf(fp, "%-13s| ", p->info.name);
		fprintf(fp, "%-33s| ", p->info.company);
		fprintf(fp, "%-53s|  ", p->info.address);
		fprintf(fp, "%-10s|  ", p->info.zipcode);
		fprintf(fp, "%-13s|  ", p->info.phone);
		fprintf(fp, "%s\n", p->info.email);
		write_file(fp, p->right);
	}
}
void left_rotate(Node *x)
{
	Node *y = x->right;
	x->right = y->left;
	if(y->left!=NULL)
		y->left->parent = x;
	y->parent = x->parent;

	if (x->parent == NULL)
		ROOT = y;
	else if (x == x->parent->left)
		x->parent->left = y;
	else
		x->parent->right = y;

	y->left = x;
	x->parent = y;
}
void right_rotate(Node *x)
{
	Node *y = x->left;
	x->left = y->right;
	if(y->right!=NULL)
		y->right->parent = x;
	y->parent = x->parent;

	if (x->parent == NULL)
		ROOT = y;
	else if (x == x->parent->left)
		x->parent->left = y;
	else
		x->parent->right = y;

	y->right = x;
	x->parent = y;
}
void rb_insert(Node *z)
{
	Node *y = NULL;
	Node *x = ROOT;

	while (x != NULL) {
		y = x;
		if (strcmp(z->info.name,x->info.name)<0)
			x = x->left;
		else
			x = x->right;
	}
	z->parent = y;
	if (y == NULL)
		ROOT = z;
	else if (strcmp(z->info.name,y->info.name)<0)
		y->left = z;
	else
		y->right = z;

	z->left = NULL;
	z->right = NULL;
	z->color = RED;

	rb_insert_fixup(z);
}
void rb_insert_fixup(Node *z)
{
	while (z->parent != NULL&&z->parent->color == RED) {
		if (z->parent == z->parent->parent->left) {
			Node *y = z->parent->parent->right;
			if (y!=NULL&&y->color == RED) {
				z->parent->color = BLACK;
				y->color = BLACK;
				z = z->parent->parent;
			}//case 1
			else {
				if (z == z->parent->right) {
					z = z->parent;
					left_rotate(z);
				}//case 2
				z->parent->color = BLACK;
				z->parent->parent->color = RED;
				right_rotate(z->parent->parent);
			}//case 3
		}
		else {
			Node *y = z->parent->parent->left;
			if (y!=NULL&&y->color == RED) {
				z->parent->color = BLACK;
				y->color = BLACK;
				z = z->parent->parent;
			}//case 4
			else {
				if (z == z->parent->left) {
					z = z->parent;
					right_rotate(z);
				}//case 5
				z->parent->color = BLACK;
				z->parent->parent->color = RED;
				left_rotate(z->parent->parent);
			}//case 6
		}
	}
	ROOT->color = BLACK;
}
Node *rb_delete(Node *z)
{
	Node *x;
	Node *y;
	if (z->left == NULL || z->right == NULL)
		y = z;
	else
		y = tree_successor(z);
	if (y->left != NULL)
		x = y->left;
	else
		x = y->right;//x is possible to be NULL
	if(x!=NULL)
		x->parent = y->parent;
	if (y->parent == NULL)
		ROOT = x;
	else {
		if (y == y->parent->left)
			y->parent->left = x;
		else
			y->parent->right = x;
	}
	if (y != z) {
		z->info = y->info;
		//copy y's satellite data into z
	}
	if (y->color == BLACK)
		rb_delete_fixup(x);
	return y;
}
void rb_delete_fixup(Node *x)
{
	Node *w;
	while (x != ROOT&&x->color == BLACK) {
		if (x == x->parent->left) {
			w = x->parent->right;
			if (w->color == RED) {
				w->color = BLACK;
				x->parent->color = RED;
				left_rotate(x->parent);
				w = x->parent->right;
			}//case 1
			if (w->left->color == BLACK&&w->right->color == BLACK) {
				w->color = RED;
				x = x->parent;
			}//case 2
			else {
				if (w->right->color == BLACK) {
					w->left->color = BLACK;
					w->color = RED;
					right_rotate(w);
					w = x->parent->right;
				}//case 3
				w->color = x->parent->color;
				x->parent->color = BLACK;
				w->right->color = BLACK;
				left_rotate(x->parent);
				x = ROOT;
			}//case 4
		}
		else {//same as then clasue with "right" and "left" exchanged
			w = x->parent->left;
			if (w->color == RED) {
				w->color = BLACK;
				x->parent->color = RED;
				right_rotate(x->parent);
				w = x->parent->left;
			}//case 5
			if (w->right->color == BLACK&&w->left->color == BLACK) {
				w->color = RED;
				x = x->parent;
			}//case 6
			else {
				if (w->left->color == BLACK) {
					w->right->color = BLACK;
					w->color = RED;
					left_rotate(w);
					w = x->parent->left;
				}//case 7
				w->color = x->parent->color;
				x->parent->color = BLACK;
				w->left->color = BLACK;
				right_rotate(x->parent);
				x = ROOT;
			}//case 8
		}
	}
	x->color = BLACK;
}