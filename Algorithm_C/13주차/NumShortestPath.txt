#pragma warning(disable: 4996)

#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int **vertex;

void make_graph();
void set_vertex(int n);
void shortest_path(int depart, int destin, int N);

int main()
{
	make_graph();

	return 0;
}
void make_graph()
{
	int N;//number of node
	int M;//number of edge
	int depart, destin, weight;
	FILE *fp = fopen("input.txt", "r");
	if (fp == NULL) {
		printf("No File.\n");
		return;
	}

	fscanf(fp, "%d", &N);
	fscanf(fp, "%d", &M); 
	if (N > 100 || N < 0 || M < 0) {
		printf("Error!.\n");
		return;
	}
	
	set_vertex(N);

	for (int i = 0;i < M;i++) {
		fscanf(fp, "%d", &depart);
		fscanf(fp, "%d", &destin);
		fscanf(fp, "%d", &weight);

		vertex[depart][destin] = weight;
	}
	fscanf(fp, "%d", &depart);
	fscanf(fp, "%d", &destin);

	shortest_path(depart, destin,N);

	for (int i = 0;i < N;i++)
		free(vertex[i]);
	free(vertex);

	fclose(fp);
}
void set_vertex(int N)
{
	vertex = (int **)malloc(sizeof(int *)*N);
	for (int i = 0;i < N;i++) {
		vertex[i] = (int *)malloc(sizeof(int)*N);
	}
	for (int i = 0;i < N;i++) {
		for (int j = 0;j < N;j++) {
			if (i == j)
				vertex[i][j] = 0;
			else
				vertex[i][j] = 0xfff;
		}
	}
}
void shortest_path(int depart, int destin, int N)
{
	int **cnt = (int **)malloc(sizeof(int *)*N);
	int **dist = (int **)malloc(sizeof(int *)*N);
	for (int i = 0;i < N;i++) {
		dist[i] = (int *)malloc(sizeof(int)*N);
		cnt[i] = (int *)malloc(sizeof(int)*N);
	}
	for(int i=0;i<N;i++)
		for (int j = 0;j < N;j++) {
			dist[i][j] = vertex[i][j];
			if (dist[i][j] != 0xfff)
				cnt[i][j] = 1;
		}
	for (int k = 0;k < N;k++) {
		for (int i = 0;i < N;i++) {
			for (int j = 0;j < N;j++) {
				if (dist[i][j] > dist[i][k] + dist[k][j]) {
					dist[i][j] = dist[i][k] + dist[k][j];
					cnt[i][j] = 1;
				}
				else if (i != k&&j != k&&dist[i][j] == dist[i][k] + dist[k][j])
					cnt[i][j]++;
			}
		}
	}

	printf("%d\n", cnt[depart][destin]);
	for (int i = 0;i < N;i++) {
		free(dist[i]);
		free(cnt[i]);
	}
	free(dist);
	free(cnt);
}
