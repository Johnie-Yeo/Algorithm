#pragma warning(disable: 4996)

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define BUFFER_SIZE 1000

typedef struct {
	int x, y;
}Point;

int  lcs(char *x, char *y, int  m, int  n);
void print_lcs(Point **p, int **c, char *x, int n, int m);

int main()
{
	char buffer1[BUFFER_SIZE];
	char buffer2[BUFFER_SIZE];
	int length;
	FILE *fp = fopen("input.txt", "r");
	if (fp == NULL) {
		printf("No file exists.\n");
		return 0;
	}
	while (!feof(fp)) {
		fscanf(fp, "%s", buffer1);
		fscanf(fp, "%s", buffer2);

		length=lcs(buffer1, buffer2, strlen(buffer1), strlen(buffer2));

		printf("The length of lcs: %d\n", length);
	}
	fclose(fp);

	return 0;
}
int  lcs(char *x, char *y, int  m, int  n)  /*  m:  length  of  X,  n:  length  of  Y  */ 
{
	int value;
	int idx = 0;
	int **c = (int **)malloc(sizeof(int *)*(m+1));
	Point **p = (Point **)malloc(sizeof(Point *)*(m + 1));
	for (int i = 0; i <= m; i++) {
		c[i] = (int *)malloc(sizeof(int)*(n+1));
		p[i] = (Point *)malloc(sizeof(Point)*(n + 1));
		c[i][0] = 0;
		p[i][0] = { 0,0 };
	}
	for (int j = 0; j <= n; j++) {
		c[0][j] = 0;
		p[0][j] = { 0,0 };
	}
	for (int  i = 1;  i <= m;  i++) { 
		for (int  j = 1;  j <= n;  j++) { 
			if (x[i-1] == y[j-1]) {
				c[i][j] = c[i - 1][j - 1] + 1;
				p[i][j] = { i - 1,j - 1 };
			}
			else {
				if (c[i - 1][j] >= c[i][j - 1]) {
					c[i][j] = c[i - 1][j];
					p[i][j] = { i - 1,j };
				}
				else {
					c[i][j] = c[i][j - 1];
					p[i][j] = { i,j - 1 };
				}
			}
		}
	}
	value = c[m][n];
	printf("The lcs string: ");
	print_lcs(p, c, x, m, n);
	printf("\n");

	for (int i = 0;i <= m;i++) {
		free(c[i]);
		free(p[i]);
	}
	free(c);
	free(p);

	return  value; 
}
void print_lcs(Point **p,int **c, char *x, int m, int n)
{
	//끝점에서 recursion
	//prev point로 갔을때 값이 변하면 변하기 전의 문자 출력
	//안변하면 그대로 진행
	if (n == 0 || m == 0)
		return;
	else {
		int prev_x = p[m][n].x;
		int prev_y = p[m][n].y;
		print_lcs(p, c, x, prev_x, prev_y);
		if (c[prev_x][prev_y] + 1 == c[m][n])
			printf("%c", x[m-1]);
	}
}