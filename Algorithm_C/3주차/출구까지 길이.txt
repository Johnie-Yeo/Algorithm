#pragma warning(disable:4996)

#include <stdio.h>
#include <stdlib.h>
#include<stdbool.h>

int N;
int K;
int **maze;

void maze_mallocation(int n);
void maze_free(int n);
int MazePath(int x, int y, int dist);


int main()
{
	int T;
	FILE *fp = fopen("input1.txt", "r");
	fscanf(fp, "%d", &T);
	for (int i = 0;i < T;i++) {
		fscanf(fp, "%d", &N);
		maze_mallocation(N);
		for (int p = 0;p < N;p++) {
			for (int q = 0;q < N;q++) {
				fscanf(fp, "%d", &maze[p][q]);
			}
		}
		fscanf(fp, "%d", &K);

		int result = MazePath(0, 0, 0);
		printf("Length: %d\n", -result);

		maze_free(N);
	}
	fclose(fp);
}
void maze_mallocation(int n)
{
	maze = (int **)malloc(sizeof(int *)*n);
	for (int i = 0;i < n;i++) {
		maze[i] = (int *)malloc(sizeof(int)*n);
	}
}
void maze_free(int n)
{
	for (int i = 0;i < n;i++)
		free(maze[i]);
	free(maze);
}

int MazePath(int x, int y, int dist) {
	if (x<0 || y<0 || x >= N || y >= N || maze[x][y] != 0)       
		return 1;    
	else if (x == N - 1 && y == N - 1) { 
		maze[x][y] = dist-1;    
		return dist; 
	} 
	else { 
		maze[x][y] =dist-1;   
		if (MazePath(x - 1, y, dist - 1) <= 0 || MazePath(x, y + 1, dist - 1) <= 0 || 
			MazePath(x + 1, y, dist - 1) <= 0 || MazePath(x, y - 1, dist - 1) <= 0) { 
		//	if(maze[N - 1][N - 1]<0)
				return (maze[N-1][N-1]);

		}
	return 1; 
	}
}