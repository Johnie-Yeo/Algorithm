#pragma warning(disable:4996)

#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>

void radixSort(int *A, int d, int size);
int get_digit(int n, int d);
int pow(int a, int b);
void countingSort(int *A, int digit, int k, int size);

int main()
{
	int data[10];
	while (1) {
		printf("$ ");
		for (int i = 0;i < 10;i++)
			scanf("%d", &data[i]);
		if (*data == -1)
			break;
		radixSort(data, 3, 10);
		for (int i = 0;i <10;i++)
			printf("%d\t", data[i]);
		printf("\n");
	}
	return 0;
}
void radixSort(int *A, int d, int size)
{
	for (int i = 1;i <= d;i++) {
		//use a stable sort to sort arrray A on digit i
		countingSort(A,i, 10, size);
	}
}
int get_digit(int n, int d)
{
	n = n%pow(10, d);
	n = n/pow(10, d - 1);

	return n;
}
int pow(int a, int b)
{
	if (b == 0)
		return 1;
	else if (b == 1)
		return a;
	for (int i = 1;i < b;i++)
		a *= a;
	return a;
}
void countingSort(int *A,int digit, int k, int size)
{
	int *B = (int *)malloc(sizeof(int)*size);
	int *C = (int *)malloc(sizeof(int)*k);
	for (int i = 0;i < k;i++)
		C[i] = 0;
	for (int j = 0;j < size;j++)
		C[get_digit(A[j],digit)]++;
	for (int i = 1;i < k;i++)
		C[i] += C[i - 1];
	for (int j = size - 1;j >= 0;j--) {
		int idx = get_digit(A[j], digit);
		B[C[idx] - 1] = A[j];
		C[idx]--;
	}
	for (int i = 0;i < size;i++)
		A[i] = B[i];
	free(C);
	free(B);
}