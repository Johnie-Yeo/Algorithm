
void max_heap_insert(int *A, int key) {
	heap_size++;
	A[heap_size] = key;
	int i = heap_size;
	while (i > 1 && A[get_parent(i)] < A[i]) {
		swap(A[i], A[get_parent(i)]);
		i = get_parent(i);
	}
}
int get_parent(int i)
{
	if (i == 1)
		return -1;
	else
		return i / 2;
}
void extract_max(int *A)
{
	if (heap_size[A] < 1) {
		printf("Error. heap underflow.");
		return;
	}
	int max = A[1];
	A[1] = A[heap_size[A]];
	heap_size[A]--;
	max_heapify(A, 1);
	return max;
}